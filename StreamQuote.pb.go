// Code generated by protoc-gen-go.
// source: StreamQuote.proto
// DO NOT EDIT!

/*
Package sd_Streams is a generated protocol buffer package.

It is generated from these files:
	StreamQuote.proto

It has these top-level messages:
	Price
	Symbol
	Time
	StreamQuote
*/
package sd_Streams

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Price struct {
	Precision        *uint32  `protobuf:"varint,1,opt,name=precision" json:"precision,omitempty"`
	Price            *float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Price) Reset()                    { *m = Price{} }
func (m *Price) String() string            { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()               {}
func (*Price) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Price) GetPrecision() uint32 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func (m *Price) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

type Symbol struct {
	SymbolStr        *string `protobuf:"bytes,1,opt,name=symbolStr" json:"symbolStr,omitempty"`
	SymbolType       *int32  `protobuf:"varint,2,opt,name=symbolType" json:"symbolType,omitempty"`
	ExchangeType     *int32  `protobuf:"varint,3,opt,name=exchangeType" json:"exchangeType,omitempty"`
	CountryType      *int32  `protobuf:"varint,4,opt,name=countryType" json:"countryType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Symbol) Reset()                    { *m = Symbol{} }
func (m *Symbol) String() string            { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()               {}
func (*Symbol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Symbol) GetSymbolStr() string {
	if m != nil && m.SymbolStr != nil {
		return *m.SymbolStr
	}
	return ""
}

func (m *Symbol) GetSymbolType() int32 {
	if m != nil && m.SymbolType != nil {
		return *m.SymbolType
	}
	return 0
}

func (m *Symbol) GetExchangeType() int32 {
	if m != nil && m.ExchangeType != nil {
		return *m.ExchangeType
	}
	return 0
}

func (m *Symbol) GetCountryType() int32 {
	if m != nil && m.CountryType != nil {
		return *m.CountryType
	}
	return 0
}

type Time struct {
	Year             *uint32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month            *uint32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	DayOfWeek        *uint32 `protobuf:"varint,3,opt,name=dayOfWeek" json:"dayOfWeek,omitempty"`
	Day              *uint32 `protobuf:"varint,4,opt,name=day" json:"day,omitempty"`
	Hour             *uint32 `protobuf:"varint,5,opt,name=hour" json:"hour,omitempty"`
	Minute           *uint32 `protobuf:"varint,6,opt,name=minute" json:"minute,omitempty"`
	Second           *uint32 `protobuf:"varint,7,opt,name=second" json:"second,omitempty"`
	Milliseconds     *uint32 `protobuf:"varint,8,opt,name=milliseconds" json:"milliseconds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Time) GetYear() uint32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Time) GetMonth() uint32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *Time) GetDayOfWeek() uint32 {
	if m != nil && m.DayOfWeek != nil {
		return *m.DayOfWeek
	}
	return 0
}

func (m *Time) GetDay() uint32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *Time) GetHour() uint32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

func (m *Time) GetMinute() uint32 {
	if m != nil && m.Minute != nil {
		return *m.Minute
	}
	return 0
}

func (m *Time) GetSecond() uint32 {
	if m != nil && m.Second != nil {
		return *m.Second
	}
	return 0
}

func (m *Time) GetMilliseconds() uint32 {
	if m != nil && m.Milliseconds != nil {
		return *m.Milliseconds
	}
	return 0
}

type StreamQuote struct {
	MessageId        *string           `protobuf:"bytes,1,opt,name=messageId" json:"messageId,omitempty"`
	Data             *StreamQuote_Data `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StreamQuote) Reset()                    { *m = StreamQuote{} }
func (m *StreamQuote) String() string            { return proto.CompactTextString(m) }
func (*StreamQuote) ProtoMessage()               {}
func (*StreamQuote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StreamQuote) GetMessageId() string {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return ""
}

func (m *StreamQuote) GetData() *StreamQuote_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type StreamQuote_Data struct {
	Symbol           *Symbol `protobuf:"bytes,1,opt,name=Symbol" json:"Symbol,omitempty"`
	Condition        *uint32 `protobuf:"varint,2,opt,name=condition" json:"condition,omitempty"`
	BidExchange      *uint32 `protobuf:"varint,3,opt,name=bidExchange" json:"bidExchange,omitempty"`
	AskExchange      *uint32 `protobuf:"varint,4,opt,name=askExchange" json:"askExchange,omitempty"`
	BidPrice         *Price  `protobuf:"bytes,5,opt,name=bidPrice" json:"bidPrice,omitempty"`
	AskPrice         *Price  `protobuf:"bytes,6,opt,name=askPrice" json:"askPrice,omitempty"`
	BidSize          *uint32 `protobuf:"varint,7,opt,name=bidSize" json:"bidSize,omitempty"`
	AskSize          *uint32 `protobuf:"varint,8,opt,name=askSize" json:"askSize,omitempty"`
	Time             *Time   `protobuf:"bytes,9,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StreamQuote_Data) Reset()                    { *m = StreamQuote_Data{} }
func (m *StreamQuote_Data) String() string            { return proto.CompactTextString(m) }
func (*StreamQuote_Data) ProtoMessage()               {}
func (*StreamQuote_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *StreamQuote_Data) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *StreamQuote_Data) GetCondition() uint32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

func (m *StreamQuote_Data) GetBidExchange() uint32 {
	if m != nil && m.BidExchange != nil {
		return *m.BidExchange
	}
	return 0
}

func (m *StreamQuote_Data) GetAskExchange() uint32 {
	if m != nil && m.AskExchange != nil {
		return *m.AskExchange
	}
	return 0
}

func (m *StreamQuote_Data) GetBidPrice() *Price {
	if m != nil {
		return m.BidPrice
	}
	return nil
}

func (m *StreamQuote_Data) GetAskPrice() *Price {
	if m != nil {
		return m.AskPrice
	}
	return nil
}

func (m *StreamQuote_Data) GetBidSize() uint32 {
	if m != nil && m.BidSize != nil {
		return *m.BidSize
	}
	return 0
}

func (m *StreamQuote_Data) GetAskSize() uint32 {
	if m != nil && m.AskSize != nil {
		return *m.AskSize
	}
	return 0
}

func (m *StreamQuote_Data) GetTime() *Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*Price)(nil), "sd.StreamQuote.Price")
	proto.RegisterType((*Symbol)(nil), "sd.StreamQuote.Symbol")
	proto.RegisterType((*Time)(nil), "sd.StreamQuote.Time")
	proto.RegisterType((*StreamQuote)(nil), "sd.StreamQuote.StreamQuote")
	proto.RegisterType((*StreamQuote_Data)(nil), "sd.StreamQuote.StreamQuote.Data")
}

func init() { proto.RegisterFile("StreamQuote.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0x95, 0x6d, 0x92, 0xdd, 0x1d, 0x6f, 0x5a, 0xd5, 0xbb, 0xa0, 0x88, 0xd3, 0x2a, 0x07,
	0x5a, 0x2e, 0x39, 0xec, 0x33, 0xc0, 0x81, 0x13, 0xa0, 0x54, 0x42, 0xe2, 0xe6, 0xc4, 0x43, 0xd7,
	0xca, 0x3a, 0x8e, 0x6c, 0x47, 0x22, 0x5c, 0x39, 0xf0, 0x86, 0x3c, 0x0f, 0xf2, 0x24, 0x2d, 0xed,
	0x22, 0xf5, 0xe6, 0xf9, 0x3c, 0xf3, 0xcf, 0xcc, 0x3f, 0x70, 0x5d, 0x79, 0x8b, 0x42, 0x7f, 0x19,
	0x8c, 0xc7, 0xb2, 0xb7, 0xc6, 0x1b, 0x7e, 0xe9, 0x64, 0xf9, 0x84, 0x16, 0xef, 0x20, 0xf9, 0x6c,
	0x55, 0x83, 0xfc, 0x1a, 0xd6, 0xbd, 0xc5, 0x46, 0x39, 0x65, 0xba, 0x3c, 0xda, 0x47, 0xb7, 0x19,
	0xcf, 0x20, 0xe9, 0xc3, 0x5f, 0xbe, 0xd8, 0x47, 0xb7, 0x51, 0xf1, 0x0d, 0xd2, 0x6a, 0xd4, 0xb5,
	0x39, 0x85, 0x5c, 0x47, 0xaf, 0xca, 0x5b, 0xca, 0x5d, 0x73, 0x0e, 0x30, 0xa1, 0xbb, 0xb1, 0x9f,
	0x0a, 0x12, 0xbe, 0x83, 0x0d, 0xfe, 0x68, 0x8e, 0xa2, 0xbb, 0x47, 0xa2, 0x17, 0x44, 0xb7, 0xc0,
	0x1a, 0x33, 0x74, 0xde, 0x8e, 0x04, 0xe3, 0x00, 0x8b, 0xdf, 0x11, 0xc4, 0x77, 0x4a, 0x23, 0xdf,
	0x40, 0x3c, 0xa2, 0xb0, 0xff, 0x26, 0xd0, 0xa6, 0xf3, 0x47, 0x12, 0xcc, 0x42, 0x5f, 0x29, 0xc6,
	0x4f, 0xdf, 0xbf, 0x22, 0xb6, 0xa4, 0x96, 0x71, 0x06, 0x17, 0x52, 0x8c, 0xa4, 0x92, 0x85, 0xe2,
	0xa3, 0x19, 0x6c, 0x9e, 0x50, 0x74, 0x09, 0xa9, 0x56, 0xdd, 0xe0, 0x31, 0x4f, 0x1f, 0x62, 0x87,
	0x8d, 0xe9, 0x64, 0xbe, 0xa4, 0x78, 0x07, 0x1b, 0xad, 0x4e, 0x27, 0x35, 0x41, 0x97, 0xaf, 0x02,
	0x2d, 0xfe, 0x2c, 0x80, 0x3d, 0x31, 0x28, 0xf4, 0xd4, 0xe8, 0x9c, 0xb8, 0xc7, 0x8f, 0x72, 0xde,
	0xb5, 0x84, 0x58, 0x0a, 0x2f, 0x68, 0x28, 0x76, 0xd8, 0x97, 0xcf, 0x2d, 0x7d, 0xf6, 0x7e, 0x2f,
	0xbc, 0x78, 0xf3, 0x6b, 0x01, 0x71, 0x78, 0xf0, 0xb7, 0x0f, 0x0e, 0x92, 0x10, 0x3b, 0xbc, 0xfe,
	0xaf, 0xf4, 0xd1, 0xdf, 0x30, 0x92, 0xf2, 0xe1, 0x16, 0xd3, 0xea, 0x5b, 0x60, 0xb5, 0x92, 0x1f,
	0x66, 0x3b, 0xe7, 0xe5, 0xb7, 0xc0, 0x84, 0x6b, 0x1f, 0xe1, 0x64, 0xc2, 0x0d, 0xac, 0x6a, 0x25,
	0xe9, 0xa8, 0x64, 0x04, 0x3b, 0xbc, 0x3a, 0x6f, 0x33, 0x5d, 0xfc, 0x06, 0x56, 0xc2, 0xb5, 0x53,
	0x62, 0xfa, 0x52, 0xe2, 0x15, 0x2c, 0x6b, 0x25, 0x2b, 0xf5, 0x13, 0x67, 0xe7, 0xae, 0x60, 0x29,
	0x5c, 0x4b, 0x80, 0x4c, 0xe3, 0x05, 0xc4, 0x5e, 0x69, 0xcc, 0xd7, 0x24, 0xb3, 0x3b, 0x97, 0x09,
	0x97, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x16, 0x83, 0x4f, 0xd1, 0x8d, 0x02, 0x00, 0x00,
}
